* Introduction

  This is the config for my Mac.

  I like for certain applications to be installed.

  I want my dot files to be automatically setup.

  There are certain operating system settings I want one way or
  another.

* Overview

  It is based in [[https://github.com/boxen/our-boxen/#our-boxen][Boxen]]. The configuration can be reified with a single
  command.

  When it comes to applications this essentially lists [[http://brew.sh/][Homebrew]] and
  [[https://caskroom.github.io/][Homebrew Cask]] packages.

  Some things, like [[https://github.com/robbyrussell/oh-my-zsh][oh-my-zsh]], are installed by cloning a repository
  and setting up links. Boxen can do that, too. This approach also
  works for setting up dot-files.

  Boxen can be extended with modules, and an example of such a module
  is one that allows you to control OS settings such as mapping the
  =CAPS LOCK= key to =CONTROL=.

* OSX Settings

  The following settings are made possible via [[https://github.com/boxen/puppet-osx][puppet-osx]].

  #+BEGIN_SRC puppet :tangle ./modules/people/manifests/jedcn/osx_config.pp
    class people::jedcn::osx_config {

      # ZSH
      osx_chsh { $::luser:
        shell   => '/opt/boxen/homebrew/bin/zsh',
        require => Package['zsh'],
      }

      file_line { 'add zsh to /etc/shells':
        path    => '/etc/shells',
        line    => "${boxen::config::homebrewdir}/bin/zsh",
        require => Package['zsh'],
      }

      # Dock Settings
      include osx::dock::autohide
      include osx::dock::clear_dock

      # Screen Zoom
      include osx::universal_access::ctrl_mod_zoom
      include osx::universal_access::enable_scrollwheel_zoom

      # Key Repeat
      class { 'osx::global::key_repeat_delay':
        delay => 10
      }
      include osx::global::key_repeat_rate

      # Capslock becomes Control
      include osx::keyboard::capslock_to_control

      # Hot Corners
      osx::dock::hot_corner { 'Show the desktop':
        position => 'Bottom Right',
        action => 'Desktop'
      }
      osx::dock::hot_corner { 'Put Display to Sleep':
        position => 'Bottom Left',
        action => 'Put Display to Sleep'
      }
      osx::dock::hot_corner { 'Start Screen Saver':
        position => 'Top Left',
        action => 'Start Screen Saver'
      }
      osx::dock::hot_corner { 'Mission Control':
        position => 'Top Right',
        action => 'Mission Control'
      }

      # Make Developer Tools available in Safari (ie: right-click and see
      # Inspect Element)
      include osx::safari::enable_developer_mode

      # Recovery Message
      $recovery_owner = "This computer belongs to Jed Northridge."
      $recovery_contact = "If found, please contact jedcn@jedcn.com or 305-985-3326."
      osx::recovery_message { "${recovery_owner} ${recovery_contact}": }
    }
  #+END_SRC

  See [[https://github.com/jedcn/mac-config/blob/master/modules/people/manifests/jedcn/osx_config.pp][modules/people/manifests/jedcn/osx_config.pp]].

* Repositories and Dotfiles

  Boxen can clone repositories:

  #+BEGIN_SRC puppet :tangle ./modules/people/manifests/jedcn/repositories.pp
    class people::jedcn::repositories {

      $my_init_src = '/opt/init-src'

      file { $my_init_src:
        ensure => directory,
        mode   => 0644,
      }

      repository { "${my_init_src}/dot-org-files":
        source  => 'jedcn/dot-org-files',
        require => File[$my_init_src]
      }

      repository { "${my_init_src}/oh-my-zsh":
        source  => 'robbyrussell/oh-my-zsh',
        require => File[$my_init_src]
      }

      repository { "${my_init_src}/cask":
        source  => 'cask/cask',
        require => File[$my_init_src]
      }

    }
  #+END_SRC

  See [[https://github.com/jedcn/mac-config/blob/master/modules/people/manifests/jedcn/repositories.pp][modules/people/manifests/jedcn/repositories.pp]].

  Boxen can setup links to cloned repositories:

  #+BEGIN_SRC puppet :tangle ./modules/people/manifests/jedcn/links.pp
    class people::jedcn::links {

      $my_init_src = '/opt/init-src'

      file { "/Users/${luser}/.zshrc":
        ensure  => link,
        mode    => '0644',
        target  => "${my_init_src}/dot-org-files/home/.zshrc",
        require => Repository["${my_init_src}/dot-org-files"],
      }

      file { "/Users/${luser}/.oh-my-zsh":
        ensure  => link,
        target  => "${my_init_src}/oh-my-zsh",
        require => Repository["${my_init_src}/oh-my-zsh"],
      }

      file { "/Users/${luser}/.cask":
        ensure  => link,
        target  => "${my_init_src}/cask",
        require => Repository["${my_init_src}/cask"],
      }

      file { "/Users/${luser}/.hammerspoon":
        ensure  => link,
        target  => "${my_init_src}/dot-org-files/home/.hammerspoon",
        require => Repository["${my_init_src}/dot-org-files"],
      }
    }
  #+END_SRC

  See [[https://github.com/jedcn/mac-config/blob/master/modules/people/manifests/jedcn/repositories.pp][modules/people/manifests/jedcn/links.pp]].

* Applications

  I'm using Homebrew Cask for applications. The only exception is
  [[https://github.com/boxen/puppet-chrome][puppet-crome]].

  #+BEGIN_SRC puppet :tangle ./modules/people/manifests/jedcn/applications.pp
    class people::jedcn::applications {
      include chrome
      include chrome::canary

      include brewcask
      package { 'hammerspoon':
        provider => 'brewcask',
        require  => File["/Users/${luser}/.hammerspoon"],
      }

      package { 'aerial':
        provider => 'brewcask',
      }
    }
  #+END_SRC

  See [[https://github.com/jedcn/mac-config/blob/master/modules/people/manifests/jedcn/applications.pp][modules/people/manifests/jedcn/applications.pp]].

  Notes:

** Screen Saver

  I am using [[https://github.com/JohnCoates/Aerial][Aerial]].

  After a boxen run, you still need to open System Preferences ->
  Desktop & Screen Saver -> Screen Saver, and select it.

** Window Management

   I use Hammerspoon for window management.

   After a boxen run, you still need to launch Hammerspoon and:

    + Enable Accessibility
    + Select Launch Hammerspoon on Login
    + Deselect Show Dock Icon
    + Deselect Send Crash Data

* Homebrew

  These are the packages I like:

  #+BEGIN_SRC puppet :tangle ./modules/people/manifests/jedcn/homebrew.pp
    class people::jedcn::homebrew {
      $homebrew_packages = [
                            'ag',
                            'tmux',
                            'tree',
                            'wget',
                            'zsh',
                            ]

      package { $homebrew_packages: }

      package { 'cask':
        ensure  => present,
        require => Package['emacs'],
      }

      package { 'emacs':
        ensure          => present,
        install_options => [
          '--cocoa',
          '--srgb'
        ],
      }
    }
  #+END_SRC

  Notes:

  + I install emacs with options that I learned about in [[http://emacsredux.com/blog/2013/08/21/color-themes-redux/][this post]].

  See [[https://github.com/jedcn/mac-config/blob/master/modules/people/manifests/jedcn/homebrew.pp][modules/people/manifests/jedcn/homebrew.pp]].

* Git Configuration

  #+BEGIN_SRC puppet :tangle ./modules/people/manifests/jedcn/git.pp
    class people::jedcn::git {
      git::config::global { 'core.editor':
        value  => '/opt/boxen/homebrew/bin/emacsclient'
      }
      git::config::global { 'push.default':
        value  => 'simple'
      }
    }
  #+END_SRC

  See [[https://github.com/jedcn/mac-config/blob/master/modules/people/manifests/jedcn/git.pp][modules/people/manifests/jedcn/git.pp]].

* One Concern per File

  Content at =modules/people/manifests/jedcn.pp= will only run if the
  current user is jedcn.

  #+BEGIN_SRC puppet :tangle ./modules/people/manifests/jedcn.pp
    class people::jedcn {
      include people::jedcn::applications
      include people::jedcn::git
      include people::jedcn::homebrew
      include people::jedcn::links
      include people::jedcn::osx_config
      include people::jedcn::repositories
    }
  #+END_SRC

  See [[https://github.com/jedcn/mac-config/blob/master/modules/people/manifests/jedcn.pp][modules/people/manifests/jedcn.pp]].

* Bootstrapping

  #+BEGIN_SRC sh
    xcode-select --install
    sudo mkdir -p /opt/boxen
    sudo chown ${USER}:staff /opt/boxen
    git clone https://github.com/jedcn/mac-config /opt/boxen/repo
    /opt/boxen/repo/script/boxen
  #+END_SRC

* Literate Programming

  *This* is an experiment in using [[http://en.wikipedia.org/wiki/Literate_programming][Literate Programming]] to describe
  how I configure my computer.

  An explanation is available in [[https://github.com/jedcn/mac-config/blob/master/literate/README.md][literate/README.md]].
