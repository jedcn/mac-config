* Website

* index.html.erb

  #+BEGIN_SRC html :tangle ../rakelib/index.html.erb
    <!DOCTYPE html>
    <!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
    <!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
    <!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
    <!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
        <head>
            <meta charset="utf-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
            <title>Mac Config</title>
            <meta name="description" content="">
            <meta name="viewport" content="width=device-width, initial-scale=1">

            <link rel="stylesheet" href="css/bootstrap.min.css">
            <style>
                body {
                    padding-top: 50px;
                    padding-bottom: 20px;
                }
            </style>
            <link rel="stylesheet" href="css/bootstrap-theme.min.css">
            <link rel="stylesheet" href="css/prism.css">
            <link rel="stylesheet" href="css/main.css">

            <script src="js/vendor/modernizr-2.8.3-respond-1.4.2.min.js"></script>
            <script src="js/vendor/prism.js"></script>
        </head>
        <body>
            <!--[if lt IE 7]>
                <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
            <![endif]-->

        <div class="container">

          <%= content %>

          <hr>

          <footer>
            <p>
              <img title=":money_with_wings:" alt=":money_with_wings:"
                   src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4b8.png">
            </p>
          </footer>
        </div> <!-- /container -->
        </body>
    </html>
  #+END_SRC

  See [[https://github.com/jedcn/mac-config/blob/master/rakelib/index.html.erb][rakelib/index.html.erb]].

* Github Pages

  When it comes to building up a Github Pages site (supporting js,
  css):

  #+BEGIN_SRC ruby :tangle ../rakelib/ghpages.rake
    require 'rake/clean'

    desc 'Create Github Pages content'
    task 'build-gh-pages' => [ 'gh-pages',
                               'gh-pages-supporting-content',
                               'gh-pages/index.html' ]

    directory 'gh-pages'
    directory 'tmp'

    #
    # Extract supporting content from HTML5BoilerPlate
    #
    task 'gh-pages-supporting-content' => [ 'gh-pages/favicon.ico',
                                            'gh-pages/css/bootstrap.min.css',
                                            'gh-pages/css/bootstrap-theme.min.css',
                                            'gh-pages/js/vendor/modernizr-2.8.3-respond-1.4.2.min.js' ]

    CLEAN.include('tmp/initializr.zip')
    CLEAN.include('tmp/initializr')

    file 'tmp/initializr' => [ 'tmp' ] do
      chdir('tmp') do
        `wget -O initializr.zip 'http://www.initializr.com/builder?boot-hero&jquerymin&h5bp-iecond&h5bp-chromeframe&h5bp-analytics&h5bp-favicon&h5bp-appletouchicons&modernizrrespond&izr-emptyscript&boot-css&boot-scripts'`
        `unzip initializr.zip`
      end
    end

    #
    # Setup files from HTML5BoilerPlate
    #
    def cp_from_initializr(file, dir=nil)
      dest =
        if dir
          "gh-pages/#{dir}"
        else
          'gh-pages'
        end
      FileUtils.cp("tmp/initializr/#{file}", dest, verbose: true)
    end

    directory 'gh-pages/css' => 'gh-pages'
    directory 'gh-pages/js' => 'gh-pages'
    directory 'gh-pages/js/vendor' => 'gh-pages/js'

    file 'gh-pages/favicon.ico' => 'tmp/initializr' do
      cp_from_initializr('favicon.ico')
    end

    file 'gh-pages/css/bootstrap.min.css' => 'gh-pages/css' do
      cp_from_initializr('css/bootstrap.min.css', 'css')
    end

    file 'gh-pages/css/bootstrap-theme.min.css' => 'gh-pages/css' do
      cp_from_initializr('css/bootstrap-theme.min.css', 'css')
    end

    file 'gh-pages/js/vendor/modernizr-2.8.3-respond-1.4.2.min.js' =>
         'gh-pages/js/vendor' do
      cp_from_initializr('js/vendor/modernizr-2.8.3-respond-1.4.2.min.js',
                         'js/vendor')
    end

    directory 'gh-pages/css' => 'gh-pages'

    file 'README.html' => :emacs_installed do
      export_html_using_emacs('literate/boxen.org')
    end

    file 'gh-pages/index.html' => [ 'gh-pages', 'README.html' ] do

      require 'erb'
      require 'ostruct'

      class ContentWrapper < OpenStruct
        def render(template)
          ERB.new(template).result(binding)
        end
      end

      template = File.read('rakelib/index.html.erb')

      content = File.read('README.html')

      cw = ContentWrapper.new({ content: content })
      File.open('gh-pages/index.html', 'w') do |file|
        file.write(cw.render(template))
      end

      rendered = File.read('gh-pages/index.html')
      ruby = "<pre>\n<code class='language-ruby'>"
      rendered = rendered.gsub('<pre class="src src-puppet">', ruby)
      rendered = rendered.gsub('<pre class="src src-ruby">', ruby)

      html = "<pre>\n<code class='language-markup'>"
      rendered = rendered.gsub('<pre class="src src-html">', html)

      rendered = rendered.gsub('</pre>', '</code></pre>')
      File.open('gh-pages/index.html', 'w') do |file|
        file.write(rendered)
      end
      rm 'README.html', verbose: true
    end

    def export_html_using_emacs(file)
      args = '--no-init-file --no-site-file --batch'
      tangle_elisp =
        %Q|(progn (require 'org) (find-file (expand-file-name \\"#{file}\\" \\"`pwd`\\")) (org-html-export-to-html nil nil nil t))|
      command = %Q|emacs #{args} --eval "#{tangle_elisp}"|
      stdout, stderr, _status = run(command)
      puts stderr
      puts stdout
    end
  #+END_SRC

  See [[https://github.com/jedcn/mac-config/blob/master/rakelib/ghpages.rake][rakelib/ghpages.rake]].
